{"version":3,"sources":["utils/RecordsAPI.js","components/Record.js","components/RecordForm.js","components/AmountBox.js","components/Records.js","serviceWorker.js","index.js"],"names":["api","process","REACT_APP_RECORDS_API_URL","Records","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","edit","setState","event","_this2","preventDefault","id","body","record","date","refs","value","title","amount","Number","parseInt","props","axios","put","concat","then","response","handleEditRecord","data","catch","error","console","log","message","_this3","delete","handleDeleteRecord","react_default","a","createElement","className","onClick","handleToggle","bind","handleDelete","type","defaultValue","ref","handleEdit","recordForm","recordRow","Component","Record","name","obj","target","post","handleNewRecord","onSubmit","handleSubmit","onChange","handleChange","placeholder","disabled","valid","AmountBox","_ref","text","isLoaded","records","get","toConsumableArray","recordIndex","indexOf","newRecords","filter","item","index","map","objectSpread","credits","reduce","prev","curr","debits","recordsComponent","_this$state","Record_Records","key","updateRecord","deleteRecord","components_AmountBox","balance","RecordForm_Record","addRecord","Boolean","window","location","hostname","match","ReactDOM","render","components_Records","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.09f42df8.chunk.js","sourcesContent":["import axios from 'axios';\r\nconst api=process.env.REACT_APP_RECORDS_API_URL || \"https://5c46d3251ef6050014d21d47.mockapi.io\"\r\nexport const getAll = () =>\r\n  axios.get(`${api}/api/v1/records`)\r\n\r\nexport const create = (body) =>\r\n  axios.post(`${api}/api/v1/records`,body)\r\n\r\nexport const update = (id, body) =>\r\n  axios.put(`${api}/api/v1/records/${id}`, body)\r\n\r\nexport const remove = (id) =>\r\n  axios.delete(`${api}/api/v1/records/${id}`)","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport * as RecordsAPI from '../utils/RecordsAPI';\r\nexport default  class Records extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state={\r\n      edit:false\r\n    }\r\n  }\r\n  handleToggle() {\r\n    this.setState({\r\n      edit: !this.state.edit\r\n    });\r\n  }\r\n  handleEdit(event) {\r\n    event.preventDefault();\r\n   \r\n   const record={\r\n     date:this.refs.date.value,\r\n     title:this.refs.title.value,\r\n     amount:Number.parseInt(this.refs.amount.value,0)\r\n   }\r\n  \r\n   RecordsAPI.update(this.props.record.id, record).then(\r\n     response =>{\r\n       this.setState({  edit:false})\r\n       this.props.handleEditRecord(this.props.record,response.data);\r\n     }\r\n   ).catch(\r\n     error => console.log(error.message)\r\n   )\r\n  }\r\n  handleDelete(event) {\r\n    event.preventDefault();\r\n    RecordsAPI.remove(this.props.record.id).then(\r\n      response => this.props.handleDeleteRecord(this.props.record)\r\n    ).catch(\r\n      error => console.log(error.message)\r\n    ) \r\n    \r\n  }\r\n  recordRow(){\r\n    return (\r\n      <tr>\r\n        <td>{this.props.record.date}</td>\r\n        <td>{this.props.record.title}</td>\r\n        <td>{this.props.record.amount}</td>\r\n        <td>\r\n          <button className=\"btn btn-info mr-2\" onClick={this.handleToggle.bind(this)}>Edit</button>\r\n          <button className=\"btn btn-info mr-2\" onClick={this.handleDelete.bind(this)}>Delete</button>\r\n        </td>\r\n    </tr>\r\n \r\n         );\r\n         }\r\n  recordForm(){\r\n    return(\r\n      <tr>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.date} ref=\"date\"/></td>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.title} ref=\"title\"/></td>\r\n        <td><input type=\"text\" className=\"form-control\" defaultValue={this.props.record.amount} ref=\"amount\"/></td>\r\n        <td>\r\n        <button className=\"btn btn-info mr-2\" onClick={this.handleEdit.bind(this)}>Update</button>\r\n        <button className=\"btn btn-info mr-2\"  onClick={this.handleToggle.bind(this)}>Cancle</button>\r\n        </td>\r\n      </tr> \r\n    );\r\n  }\r\n  \r\n  render() {\r\n     if(this.state.edit){\r\n      return this.recordForm();     \r\n   }else{\r\n     return this.recordRow();\r\n        }\r\n  }\r\n  } \r\nRecords.propTypes = {\r\n  id: PropTypes.string,\r\n  date: PropTypes.string,\r\n  title: PropTypes.string,\r\n  amount: PropTypes.number\r\n}","import React, { Component } from 'react';\r\nimport * as RecordsAPI from '../utils/RecordsAPI';\r\n\r\nexport default class Record extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          date: \"\",\r\n          title: \"\",\r\n          amount: \"\"\r\n        }\r\n      }\r\n      handleChange(event) {\r\n        let name, obj;\r\n        name = event.target.name;\r\n        this.setState((\r\n          obj = {},\r\n          obj[\"\" + name] = event.target.value,\r\n          obj\r\n        ))\r\n      }\r\n    \r\n      valid(){\r\n          return this.state.date && this.state.title && this.state.amount\r\n      }\r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n    \r\n        const data = {\r\n          date: this.state.date,\r\n          title: this.state.title,\r\n          amount: Number.parseInt(this.state.amount, 0)\r\n        }\r\n        RecordsAPI.create(data).then(\r\n            response => {\r\n              this.props.handleNewRecord(response.data);\r\n              this.setState({\r\n                date: \"\",\r\n                title: \"\",\r\n                amount: \"\"\r\n              })\r\n            }\r\n          ).catch(\r\n            error => console.log(error.message)\r\n          )\r\n      }\r\n  render() {\r\n    return (\r\n       <form className=\"form-inline mb-3\" onSubmit={this.handleSubmit.bind(this)}>\r\n         <div className=\"form-group mr-2\">\r\n            <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Date\" name=\"date\" value={this.state.date} />\r\n         </div>\r\n         <div className=\"form-group mr-2\">\r\n            <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Title\" name=\"title\" value={this.state.title} />\r\n         </div>\r\n         <div className=\"form-group mr-2\">\r\n            <input type=\"text\" className=\"form-control\" onChange={this.handleChange.bind(this)} placeholder=\"Amount\" name=\"amount\" value={this.state.amount} />\r\n         </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\" disabled={!this.valid()}>Creat Record</button>\r\n      \r\n        </form>\r\n           );\r\n           }\r\n  }\r\n  ","import React from 'react';\r\nconst AmountBox=({text,type,amount}) =>{\r\n    return(\r\n        <div className=\"col\">\r\n         <div className=\"card\">\r\n            <div className={`card-header bg-${type} text-white`}>\r\n              {text}\r\n            </div>\r\n            <div className=\"card-body\">{amount}</div>\r\n         </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default AmountBox;","import React, { Component } from 'react';\nimport Record from './Record';\n\nimport * as RecordsAPI from '../utils/RecordsAPI';\nimport RecordForm from './RecordForm';\nimport AmountBox from './AmountBox';\n\nclass Records extends Component {\n  constructor() {\n    super();\n    this.state = {\n      error:null,\n      isLoaded:false,\n      records: []\n    }\n  }\n  componentDidMount() {\n    RecordsAPI.getAll().then(\n        response => this.setState({\n        records:response.data,\n        isLoaded:true\n      })\n   ).catch(\n      error=> this.setState({\n        isLoaded:true,\n        error\n        })\n      )\n    }\n    addRecord(record) {\n      this.setState({\n        error: null,\n        isLoaded: true,\n        records: [\n          ...this.state.records,\n          record\n        ]\n      })\n    }\n deleteRecord(record){\n  const recordIndex = this.state.records.indexOf(record);\n  const newRecords = this.state.records.filter( (item, index) => index !== recordIndex);\n  this.setState({\n    records: newRecords\n  });\n }\n  updateRecord(record,data){\n    const recordIndex=this.state.records.indexOf(record);\n    const newRecords = this.state.records.map((item, index) => {\n      if (index !== recordIndex) {\n        // This isn't the item we care about - keep it as-is\n        return item\n      }\n  \n      // Otherwise, this is the one we want - return an updated value\n      return {\n        ...item,\n        ...data\n      }\n    }) \n    this.setState({\n      records:newRecords\n    })\n  }\n  credits(){\n    let credits =this.state.records.filter((record)=>{\n      return record.amount >= 0;\n    })\n    return credits.reduce((prev,curr) => {\n      return prev+Number.parseInt(curr.amount,0)\n    },0)\n  }\n  debits(){\n    let  debits =this.state.records.filter((record)=>{\n      return record.amount < 0;\n    })\n    return  debits.reduce((prev,curr)=>{\n      return prev+Number.parseInt(curr.amount,0)\n    },0)\n  }\n  balance(){\n\n      return this.debits()+ this.credits();\n   \n  }\n  render() {\n    const{error,isLoaded, records }=this.state;\n    let recordsComponent;\n    if (error) {\n      recordsComponent= <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      recordsComponent=<div>Loading...</div>;\n    } else {\n  \n      recordsComponent= (\n      <div >\n        <table className=\"table table-bordered\">\n          <thead>\n            <tr>\n              <th>date</th>\n              <th>title</th>\n              <th>amount</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n          {records.map((record)=> (\n          <Record \n          key={record.id} \n          record={record} \n          handleEditRecord={this.updateRecord.bind(this)} \n          handleDeleteRecord={this.deleteRecord.bind(this)} \n          />\n          ))}\n          </tbody>\n        </table>\n \n      </div>\n    );\n  }\n  return(\n       <div>\n          <h2>Records</h2>\n          <div className=\"row mb-3\">\n            <AmountBox text=\"Credits\" type=\"success\" amount={this.credits()}/>\n            <AmountBox text=\"Debits\" type=\"danger\" amount={this.debits()}/>\n            <AmountBox text=\"Balance\" type=\"info\" amount={this.balance()}/>\n          </div>\n          <RecordForm  handleNewRecord={this.addRecord.bind(this)} />\n          {recordsComponent}\n        \n        </div>\n       );\n}\n}\nexport default Records;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Records from './components/Records';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Records />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}